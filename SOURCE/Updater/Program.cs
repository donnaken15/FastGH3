using System;
using System.IO;
using System.Net;
using System.Text;
using Ionic.Zip;
using SimpleJSON;

// VS is a slow POS

class Program
{
	static byte[] logoBits = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11,
		0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
		0x00, 0x11, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x00, 0x11, 0x11, 0x11,
		0x00, 0x11, 0x00, 0x10, 0x00, 0x11, 0x00, 0x10, 0x00, 0x11, 0x00, 0x11,
		0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x11, 0x00, 0x10, 0x01, 0x11, 0x00, 0x11, 0x01, 0x00, 0x10, 0x11, 0x21,
		0x00, 0x11, 0x10, 0x21, 0x10, 0x01, 0x10, 0x21, 0x11, 0x11, 0x11, 0x01,
		0x11, 0x11, 0x11, 0x01, 0x01, 0x00, 0x10, 0x01, 0x01, 0x00, 0x10, 0x21,
		0x00, 0x00, 0x10, 0x21, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x10, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x20, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
		0x22, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
		0x22, 0x22, 0x02, 0x00, 0x20, 0x22, 0x22, 0x00, 0x00, 0x00, 0x22, 0x02,
		0x02, 0x00, 0x20, 0x02, 0x22, 0x00, 0x22, 0x02, 0x22, 0x22, 0x22, 0x00,
		0x20, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x02, 0x30,
		0x22, 0x22, 0x02, 0x33, 0x22, 0x00, 0x30, 0x33, 0x22, 0x00, 0x33, 0x03,
		0x22, 0x00, 0x33, 0x00, 0x22, 0x00, 0x33, 0x00, 0x22, 0x00, 0x33, 0x00,
		0x22, 0x00, 0x33, 0x00, 0x22, 0x00, 0x33, 0x03, 0x22, 0x00, 0x30, 0x33,
		0x22, 0x00, 0x00, 0x33, 0x22, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x33, 0x33, 0x00, 0x44, 0x33, 0x33, 0x03, 0x44, 0x00, 0x30, 0x33, 0x44,
		0x00, 0x00, 0x33, 0x44, 0x00, 0x00, 0x00, 0x44, 0x30, 0x33, 0x33, 0x44,
		0x30, 0x33, 0x33, 0x44, 0x00, 0x00, 0x33, 0x44, 0x00, 0x00, 0x33, 0x44,
		0x00, 0x30, 0x33, 0x44, 0x33, 0x33, 0x03, 0x44, 0x33, 0x33, 0x00, 0x44,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x55, 0x00, 0x00, 0x44, 0x55,
		0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00,
		0x44, 0x44, 0x44, 0x00, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x44, 0x00,
		0x00, 0x00, 0x44, 0x55, 0x00, 0x00, 0x44, 0x55, 0x00, 0x00, 0x44, 0x50,
		0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x00,
		0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x50, 0x55, 0x00,
		0x00, 0x55, 0x05, 0x00, 0x50, 0x55, 0x00, 0x00, 0x00, 0x50, 0x05, 0x00,
		0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x55, 0x00, 0x05, 0x50, 0x55, 0x00,
		0x55, 0x55, 0x05, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	/*
	 * 
	 * ████████   ██  ████████████  █████  ██    ██████████
	 * ████████  ███ █████████████ ███████ ██    ██████████
	 * ██       ███████      ██   ███   █████    ██      ██
	 * ██      ██ ████       ██  ███     ████    ██     ███
	 * ██     ██  █████      ██  ██        ██    ██    ███ 
	 * █████████████ █████   ██  ██   █████████████   ███  
	 * █████████████  █████  ██  ██   █████████████     ██ 
	 * ██   ██    ██     ███ ██  ██      ████    ██      ██
	 * ██   ██    ████    ██ ██  ███     ████    ████    ██
	 * ██  ██     █████  ███ ██   ███   █████    █████  ███
	 * ██  ██     ██ ██████  ██    ███████ ██    ██ ██████ 
	 * ██  ██     ██  ████   ██     █████  ██    ██  ████  
	 * 
	 */

	static uint Eswap(uint value)
	{
		return ((value & 0xFF) << 24) |
				((value & 0xFF00) << 8) |
				((value & 0xFF0000) >> 8) |
				((value & 0xFF000000) >> 24);
	}
	static uint Eswap(int value)
	{
		return Eswap((uint)value);
	}
	static ushort Eswap(ushort value)
	{
		return (ushort)((value << 8) | (value >> 8));
	}
	
	static void Main(string[] args)
	{
		Console.WriteLine();
		// i probably spent more time on this banner code and exporting to byte array than writing the actual update code
		for (int k = 2; k < 14; k++)
		{
			//string bits = "";
			Console.CursorLeft = 2;
			for (int i = 2; i < (8*7)-2; i++)
			{
				// autism
				int bit = (logoBits[(((i&7)>>1)+(k<<2)+((i>>3)<<6))] >> ((i & 1) << 2) & 7);
				char block = bit == 0 ? ' ' : '█';
				Console.ResetColor();
				switch (bit)
				{
					case 1:
						bit = 0xA;
						break;
					case 2:
						bit = 0xC;
						break;
					case 3:
						bit = 0xE;
						break;
					case 4:
						bit = 0x9;
						break;
					case 5:
						bit = 0xE;
						Console.BackgroundColor = ConsoleColor.Red;
						block = '▒';
						break;
				}
				Console.ForegroundColor = (ConsoleColor)(bit);
				Console.Write(block);
				//Console.Write(block); // double width
				// more often people will just have consolas
				// or whatever as the default font, so
				// don't bother with it here probably
				
				//bits += block;
				// can't use if i want custom colors
			}
			Console.ResetColor();
			Console.Write((char)160); //prevent red from 3 bleeding out to the right when resizing window
			Console.WriteLine();
		}
		Console.ResetColor();
		Console.WriteLine();
		Console.ForegroundColor = ConsoleColor.White;
		Console.WriteLine("  1.0\n");
		Console.ResetColor();
		Console.WriteLine("  UPDATER\n");
		
		bool testing = false;
		string dir = "";
		dir = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
		Directory.SetCurrentDirectory(dir); // make path ensuring less redundant like in the launcher

		// is this even in the right place
		if (!File.Exists("FastGH3.exe") ||
			!File.Exists("game.exe") ||
			!File.Exists("fmodex.dll"))
		{
			Console.WriteLine("No familiar mod files can be found, exiting...");
			return;
		}

		DateTime buildtime  = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
		DateTime latesttime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
		string buildname = null;
		string latestname = null;
		string vfilespath = "DATA\\MUSIC\\TOOLS\\";
		string vbin = "v.bin";
		string btbin = "bt.bin";
		if (File.Exists(vfilespath+vbin))
		{
			buildname = Encoding.UTF8.GetString(Convert.FromBase64String(File.ReadAllText(vfilespath+vbin)));
		}
		else
		{
			Console.WriteLine("Build name not found, exiting...");
			Console.ReadKey();
			return;
		}
		if (File.Exists(vfilespath+btbin))
		{
			buildtime = buildtime.AddSeconds(Eswap(BitConverter.ToInt32(File.ReadAllBytes(vfilespath+btbin),0))).ToLocalTime();
		}
		else
        {
			Console.WriteLine("Build time not found, exiting...");
			Console.ReadKey();
			return;
        }

		Console.WriteLine("Downloading version info...");
		uint latestTimestamp = 0;
		JSONNode devVers, buildList;
		try
		{
			using (WebClient fetcher = new WebClient())
			{
				fetcher.Proxy = null;
				fetcher.Headers.Add("user-agent", "Anything");
				ServicePointManager.SecurityProtocol = (SecurityProtocolType)(0xc0 | 0x300 | 0xc00);
				latestTimestamp = Eswap(BitConverter.ToUInt32(fetcher.DownloadData("https://raw.githubusercontent.com/donnaken15/FastGH3/main/DATA/MUSIC/TOOLS/bt.bin"),0));
				latesttime = latesttime.AddSeconds(latestTimestamp).ToLocalTime();
				Console.WriteLine("Build timestamp: " + buildtime.ToString());
				Console.WriteLine("Got latest timestamp: " + latesttime.ToString());
				devVers = JSON.Parse(fetcher.DownloadString("https://donnaken15.tk/fastgh3/devvers.json"));
				buildList = JSON.Parse(fetcher.DownloadString("https://donnaken15.tk/fastgh3/vl.json"));
				latestname = Encoding.UTF8.GetString(Convert.FromBase64String(fetcher.DownloadString("https://donnaken15.tk/fastgh3/v")));
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Encountered an error when downloading version info.");
			Console.WriteLine(ex);
			Console.ReadKey();
			return;
		}
		Console.WriteLine("Current build: " + buildList[buildname]);
		Console.WriteLine("Latest build: " + buildList[latestname]);
		//Console.WriteLine(devVers[0]["date"].Value);

		IniFile settings = new IniFile();

		if (File.Exists("settings.ini"))
			settings.Load("settings.ini");

		bool bleeding = settings.GetKeyValue("Updater","BleedingEdge","0") == "1";
		// set default to 1 on repo and 0 on builds??

		// should i put devlog in JSON and display here

		// also TODO: downgrading maybe for checking errors and for when they started to appear
		// as a consequence of me making this mod the most user friendly for charts

		if (bleeding)
		{
			if (latesttime > buildtime)
			{
				Console.WriteLine("Found a new dev build!");
			}
			else
            {
				Console.WriteLine("There is no new dev build.");
				Console.ReadKey();
				return;
			}
			int nearestTimestamp = 0;
			//for (int i = 0; )
			//https://raw.githubusercontent.com/donnaken15/FastGH3/0c0ff7092a1f4c482a523cf6f5da2518562bc833/DATA/MUSIC/TOOLS/bt.bin
		}
		else
		{
			if (Convert.ToUInt64(latestname) > Convert.ToUInt64(buildname))
			{
				Console.WriteLine("Found a new build!");
			}
			else
			{
				Console.WriteLine("There is no new release build.");
				Console.ReadKey();
				return;
			}
		}
		Console.WriteLine("Done.");
		Console.ReadKey();
	}
}
